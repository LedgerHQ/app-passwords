{"version":3,"sources":["logo.svg","components/RestoreButton/index.js","components/BackupButton/index.js","components/AppExplanations/index.js","App.js","index.js","controller/PasswordsManager.js"],"names":["RestoreButton","_ref","text","color","disabled","hidden","onClick","isLoading","setLoading","useState","file","useRef","hasFileInputBeenCanceled","current","value","length","document","body","onfocus","onTriggerFileSelect","useCallback","click","onSelectedFileChanged","event","target","files","then","_jsxs","className","style","margin","backgroundColor","display","children","_jsx","type","ref","onChange","accept","BackupButton","onTriggerRunThenSaveFile","fileData","blob","Blob","JSON","stringify","url","URL","createObjectURL","elem","createElement","href","download","appendChild","removeChild","downloadFile","AppExplanations","expandedItems","setexpandedItems","Accordion","allowZeroExpanded","allowMultipleExpanded","update","newExpandedItemUUID","itemButtonBottom","getElementById","concat","getBoundingClientRect","bottom","window","innerHeight","scrollBy","AccordionItem","AccordionItemHeading","AccordionItemButton","AccordionItemPanel","ReactMarkdown","passwordsManager","PasswordsManager","listen","log","console","App","ask_device","device_handler","request","Promise","async","result","connected","connect","setConnected","toast","info","autoClose","setBusy","dismiss","success","error","disconnect","toString","resolve","isBusy","isConnected","ToastContainer","hideProgressBar","src","logo","alt","dump_metadatas","metadatas","load_metadatas","packageJson","version","ReactDOM","render","React","StrictMode","insAPDU","Object","freeze","GET_APP_INFO_COMMAND","GET_APP_CONFIG_COMMAND","DUMP_METADATAS_COMMAND","LOAD_METADATAS_COMMAND","passwordsCharsets","UPPERCASE","LOWERCASE","NUMBERS","MINUS","UNDERLINE","SPACE","SPECIAL","BRACKETS","constructor","this","allowedStatuses","busy","transport","TransportWebUSB","create","appName","getAppInfo","Error","appConfig","getAppConfig","storage_size","close","isSuccess","readUInt16BE","mapProtocolError","errors","_lock","_unlock","_charsetListToBitmask","charsets","bitmask","charset","_bitmaskToCharsetList","charsetList","push","_toBytes","json_metadatas","Buffer","alloc","parsed_metadatas","parse","offset","forEach","element","nickname","write","_toJSON","metadatas_list","erased_list","corruptions","len","erased","metadata","slice","parsed","nicknames_erased_but_still_stored","corruptions_encountered","raw_metadatas","_load_metadatas_chunk","chunk","is_last","send","from","app_name","app_version","app_name_length","app_version_length","readUInt32BE","keyboard_type","press_enter_after_typing","JSON_metadatas","i"],"mappings":"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","file":"static/js/main.fccae9be.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.aeffe6a7.svg\";","import React, { useRef, useCallback, useState } from \"react\";\nimport \"./index.css\";\n\nfunction RestoreButton({ text, color, disabled, hidden, onClick }) {\n  const [isLoading, setLoading] = useState(false);\n  const file = useRef(null);\n\n  const hasFileInputBeenCanceled = () => {\n    if (!file.current.value.length) setLoading(false);\n    document.body.onfocus = null;\n  };\n\n  const onTriggerFileSelect = useCallback(() => {\n    setLoading(true);\n    document.body.onfocus = hasFileInputBeenCanceled;\n    file.current && file.current.click();\n  }, []);\n\n  const onSelectedFileChanged = useCallback(\n    (event) => {\n      event.target.files[0].text().then((text) => {\n        event.target.value = \"\";\n        onClick(text).then(() => setLoading(false));\n      });\n    },\n    [onClick]\n  );\n\n  return (\n    <button\n      className=\"RestoreButton\"\n      disabled={isLoading | disabled}\n      onClick={isLoading ? null : onTriggerFileSelect}\n      style={{\n        margin: \"10px\",\n        backgroundColor: color,\n        display: hidden ? \"none\" : true,\n      }}\n    >\n      {isLoading ? \"Loading…\" : text}\n      <input\n        type=\"file\"\n        ref={file}\n        onChange={onSelectedFileChanged}\n        accept=\".json\"\n        style={{ display: \"none\" }}\n      />\n    </button>\n  );\n}\n\nexport default RestoreButton;\n","import React, { useState, useCallback } from \"react\";\nimport \"./index.css\";\n\nfunction downloadFile(fileData) {\n  var blob = new Blob([JSON.stringify(fileData, null, 4)], {\n    type: \"application/json;charset=utf-8\",\n  });\n  var url = URL.createObjectURL(blob);\n  var elem = document.createElement(\"a\");\n  elem.href = url;\n  elem.download = \"backup.json\";\n  document.body.appendChild(elem);\n  elem.click();\n  document.body.removeChild(elem);\n}\n\nfunction BackupButton({ text, color, disabled, hidden, onClick }) {\n  const [isLoading, setLoading] = useState(false);\n\n  const onTriggerRunThenSaveFile = useCallback(() => {\n    setLoading(true);\n    onClick().then((fileData) => {\n      if (fileData) downloadFile(fileData);\n      setLoading(false);\n    });\n  }, [onClick]);\n\n  return (\n    <button\n      className=\"BackupButton\"\n      disabled={isLoading | disabled}\n      onClick={isLoading ? null : onTriggerRunThenSaveFile}\n      style={{\n        margin: \"10px\",\n        backgroundColor: color,\n        display: hidden ? \"none\" : true,\n      }}\n    >\n      {isLoading ? \"Loading…\" : text}\n    </button>\n  );\n}\n\nexport default BackupButton;\n","import React, { useState } from \"react\";\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./index.css\";\n\nexport default function AppExplanations() {\n  const [expandedItems, setexpandedItems] = useState([]);\n\n  // In case the user expands a node that is barely visible, we scroll the page to display it fully\n  function handleExpand(update) {\n    if (update.length > expandedItems.length) {\n      const newExpandedItemUUID = update[update.length - 1];\n      const itemButtonBottom = document\n        .getElementById(`accordion__panel-${newExpandedItemUUID}`)\n        .getBoundingClientRect().bottom;\n      if (itemButtonBottom > window.innerHeight) {\n        window.scrollBy(0, itemButtonBottom - window.innerHeight);\n      }\n    }\n    setexpandedItems(update);\n  }\n\n  const whatIsThisWebApp_help =\n    // eslint-disable-next-line\n    \"This Web App allows you to backup/restore the list of `password nicknames` stored inside the `Passwords app` on your Ledger Nano S/ Nano X.  \\n\\\n    It is useful to have such a backup when you update the Passwords app on your device, or the device firmware, because the list gets erased. Another case where it's practical to have a nickname backup is when you loose your device: Restoring the [24-words recovery phrase](https://www.ledger.com/academy/crypto/what-is-a-recovery-phrase) is necessary but not sufficient to restore your passwords, you need your nickname list as well.  \\n\\\n    The backup consists in a human readable `backup.json` file containing a dump of the 4096 bytes of application storage.  \\n\\\n    Note that all operations of this Web App are done locally on your computer, there are no external communications occurring.\";\n\n  const whatIsTheLedgerPasswordsApp_help =\n    \"Look [here](https://github.com/LedgerHQ/app-passwords/blob/master/README.md) for more information on the device application itself.\";\n\n  const howToUseThisWebApp_help =\n    // eslint-disable-next-line\n    '* Connect your Nano S/X to your computer and open the `Passwords app`.\\n* You can now click on the big `Connect` button, and if it succeeds the `Backup` and `Restore` buttons should replace the previous button. If you have troubles with this step, have a look [here](https://support.ledger.com/hc/en-us/articles/115005165269-Fix-connection-issues). \\n* Either click on `Backup` or `Restore` depending on what you want to do:  \\n\\\n    * `Backup` will prompt a screen requesting your approval on your device (`\"Transfer metadatas ?\"`), then save a backup file. This is your backup. it\\'s not confidential, so for instance you can send it to yourself by e-mail to never loose it.  \\n\\\n    * `Restore` will prompt a file input dialog where you should indicate a previous backup file. A prompt (`\"Overwrite metadatas ?\"`) will then request your approval on your device. Done.';\n\n  const whichbrowsersAreSupported_help =\n    \"The communication with the device is done through `WebUSB`, which is currently supported only on `Google Chrome` / `Chromium` / `Brave` for `Linux` and `MacOS`. On `Windows`, you need to first go to `chrome://flags` then search for `Enable new USB backend`, disable it and relaunch Chrome.\";\n\n  const lessCommonUseCases_help =\n    // eslint-disable-next-line\n    \"* If you ever encounter a WTF-kind of error with your passwords app (some or all of your entries are suddenly gone? A password has changed ?), it is wise to first come here and make a backup. You can then have a look inside the backup file to see if something is wrong (You might also want to create an issue [here](https://github.com/LedgerHQ/app-passwords/issues) so we fix your issue for all users). \\n* If you want to add a lot of new passwords, the manual input on the device keyboard will show its limits. You can instead create a backup and edit it manually to add all your new entries. You just have to restore your app with this file and the job is done :)\";\n\n  return (\n    <Accordion allowZeroExpanded allowMultipleExpanded onChange={handleExpand}>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>What is this Web App ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={whatIsThisWebApp_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>\n            What is the Ledger Passwords application ?\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={whatIsTheLedgerPasswordsApp_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>How to use this Web App ?</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={howToUseThisWebApp_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>\n            Which web browsers and operating systems are supported ?\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={whichbrowsersAreSupported_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton>Less common use cases</AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <ReactMarkdown\n            className=\"Explanations\"\n            children={lessCommonUseCases_help}\n          ></ReactMarkdown>\n        </AccordionItemPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport RestoreButton from \"./components/RestoreButton\";\nimport BackupButton from \"./components/BackupButton\";\nimport PasswordsManager from \"./controller/PasswordsManager.js\";\nimport AppExplanations from \"./components/AppExplanations\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { listen } from \"@ledgerhq/logs\";\nimport packageJson from \"../package.json\";\nimport \"./App.css\";\n\nconst passwordsManager = new PasswordsManager();\nlisten((log) => {\n  console.log(log);\n});\n\nfunction App() {\n  function ask_device(device_handler, request) {\n    return new Promise(async (resolve) => {\n      let result = null;\n      try {\n        if (!device_handler.connected) {\n          await device_handler.connect();\n          setConnected(true);\n          toast.info(\"Device connected 👌\", { autoClose: false });\n        }\n        if (request) {\n          toast.info(\"Approve action on your device ✨\", { autoClose: false });\n          setBusy(true);\n          result = await request();\n\n          toast.dismiss();\n          toast.success(\"Success 🦄\");\n        }\n      } catch (error) {\n        device_handler.disconnect();\n        setConnected(false);\n        toast.dismiss();\n        toast.error(`${error.toString()} 🙅`);\n      } finally {\n        setBusy(false);\n        resolve(result);\n      }\n    });\n  }\n\n  // const  = new PasswordsManager(true);\n\n  const [isBusy, setBusy] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <ToastContainer hideProgressBar={true} />\n      <div className=\"App-banner\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"App-title\">Passwords Backup</p>\n      </div>\n      <header className=\"App-header\">\n        <div className=\"Commands\">\n          <BackupButton\n            text=\"Connect\"\n            color=\"#41ccb4\"\n            disabled={isBusy}\n            hidden={isConnected}\n            onClick={() => ask_device(passwordsManager)}\n          />\n          <BackupButton\n            text=\"Backup\"\n            color=\"#41ccb4\"\n            disabled={isBusy}\n            hidden={!isConnected}\n            onClick={() =>\n              ask_device(passwordsManager, () =>\n                passwordsManager.dump_metadatas()\n              )\n            }\n          />\n          <RestoreButton\n            text=\"Restore\"\n            color=\"#FFB86D\"\n            disabled={isBusy}\n            hidden={!isConnected}\n            onClick={(metadatas) =>\n              ask_device(passwordsManager, () =>\n                passwordsManager.load_metadatas(metadatas)\n              )\n            }\n          />\n        </div>\n        <AppExplanations></AppExplanations>\n        <div className=\"App-footer\">\n          <p>\n            A modest Web App built at Ledger with React, hosted by Github. v\n            {`${packageJson.version}`}.{\" \"}\n            <a href=\"https://github.com/LedgerHQ/passwords-backup\">\n              PRs welcomed and appreciated ✨\n            </a>\n          </p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nconst insAPDU = Object.freeze({\n  GET_APP_INFO_COMMAND: 0x01,\n  GET_APP_CONFIG_COMMAND: 0x03,\n  DUMP_METADATAS_COMMAND: 0x04,\n  LOAD_METADATAS_COMMAND: 0x05,\n});\n\nconst passwordsCharsets = Object.freeze({\n  UPPERCASE: 1,\n  LOWERCASE: 2,\n  NUMBERS: 4,\n  MINUS: 8,\n  UNDERLINE: 16,\n  SPACE: 32,\n  SPECIAL: 64,\n  BRACKETS: 128,\n});\n\nconst allPasswordsCharsets = 0xff;\n\nclass PasswordsManager {\n  constructor() {\n    this.allowedStatuses = [\n      0x9000,\n      0x6985,\n      0x6a86,\n      0x6a87,\n      0x6d00,\n      0x6e00,\n      0xb000,\n    ];\n    this.connected = false;\n    this.busy = false;\n    this.transport = null;\n  }\n\n  async connect() {\n    if (!this.connected) {\n      if (!this.transport) this.transport = await TransportWebUSB.create();\n      try {\n        const [appName, version] = await this.getAppInfo();\n        if (appName.toString() !== \"Passwords\")\n          throw new Error(\"The Passwords app is not opened on the device\");\n        this.version = version;\n        let appConfig = await this.getAppConfig();\n        this.storage_size = appConfig[\"storage_size\"];\n        this.connected = true;\n      } catch (error) {\n        await this.transport.close();\n        this.disconnect();\n        throw error;\n      }\n    }\n  }\n\n  isSuccess(result) {\n    return (\n      result.length >= 2 && result.readUInt16BE(result.length - 2) === 0x9000\n    );\n  }\n\n  disconnect() {\n    this.connected = false;\n    this.transport = null;\n  }\n\n  mapProtocolError(result) {\n    if (result.length < 2) throw new Error(\"Response length is too small\");\n\n    var errors = {\n      0x6985: \"Action cancelled\",\n      0x6a86: \"SW_WRONG_P1P2\",\n      0x6a87: \"SW_WRONG_DATA_LENGTH\",\n      0x6d00: \"SW_INS_NOT_SUPPORTED\",\n      0x6e00: \"SW_CLA_NOT_SUPPORTED\",\n      0xb000: \"SW_APPNAME_TOO_LONG\",\n      0x6f10: \"SW_METADATAS_PARSING_ERROR\",\n    };\n\n    let error = result.readUInt16BE(result.length - 2);\n    if (error in errors) {\n      throw new Error(errors[error]);\n    }\n  }\n\n  _lock() {\n    if (this.busy) throw new Error(\"Device is busy\");\n    this.busy = true;\n  }\n\n  _unlock() {\n    this.busy = false;\n  }\n\n  _charsetListToBitmask(charsets) {\n    let bitmask = 0x00;\n    for (const charset of charsets) {\n      bitmask |= passwordsCharsets[charset];\n    }\n    if (bitmask === 0x00) bitmask = allPasswordsCharsets;\n    return bitmask;\n  }\n\n  _bitmaskToCharsetList(bitmask) {\n    let charsetList = [];\n    if (bitmask === 0x00 || bitmask === allPasswordsCharsets) {\n      charsetList.push(\"ALL_SETS\");\n    } else {\n      for (const charset in passwordsCharsets) {\n        if (passwordsCharsets[charset] & bitmask) charsetList.push(charset);\n      }\n    }\n    return charsetList;\n  }\n\n  _toBytes(json_metadatas) {\n    let metadatas = Buffer.alloc(this.storage_size);\n    let parsed_metadatas = JSON.parse(json_metadatas)[\"parsed\"];\n    let offset = 0;\n    parsed_metadatas.forEach((element) => {\n      let nickname = element[\"nickname\"];\n      let charsets = this._charsetListToBitmask(element[\"charsets\"]);\n      if (nickname.length > 19)\n        throw new Error(\n          `Nickname too long (19 max): ${nickname} has length ${nickname.length}`\n        );\n      if (offset + 3 + nickname.length >= this.storage_size)\n        throw new Error(\n          `Not enough memory on this device to restore this backup`\n        );\n      metadatas[offset++] = nickname.length + 1;\n      metadatas[offset++] = 0x00;\n      metadatas[offset++] = charsets;\n      metadatas.write(nickname, offset);\n      offset += nickname.length;\n    });\n    // mark free space at the end of the buffer\n    metadatas[offset++] = 0x00;\n    metadatas[offset++] = 0x00;\n    return metadatas;\n  }\n\n  _toJSON(metadatas) {\n    let metadatas_list = [];\n    let erased_list = [];\n    let offset = 0;\n    let corruptions = [];\n    while (true) {\n      let len = metadatas[offset];\n      if (len === 0) break;\n      let erased = metadatas[offset + 1] === 0xff ? true : false;\n      let charsets = metadatas[offset + 2];\n      if (len > 19 + 1)\n        corruptions += [offset, `nickname too long ${len}, max is 19`];\n      let metadata = {\n        nickname: metadatas.slice(offset + 3, offset + 2 + len).toString(),\n        charsets: this._bitmaskToCharsetList(charsets),\n      };\n      erased ? erased_list.push(metadata) : metadatas_list.push(metadata);\n      offset += len + 2;\n    }\n    return {\n      parsed: metadatas_list,\n      nicknames_erased_but_still_stored: erased_list,\n      corruptions_encountered: corruptions,\n      raw_metadatas: metadatas.toString(\"hex\"),\n    };\n  }\n\n  async _load_metadatas_chunk(chunk, is_last) {\n    let result = await this.transport.send(\n      0xe0,\n      insAPDU.LOAD_METADATAS_COMMAND,\n      is_last ? 0xff : 0x00,\n      0x00,\n      Buffer.from(chunk),\n      this.allowedStatuses\n    );\n    if (!this.isSuccess(result)) this.mapProtocolError(result);\n    return result;\n  }\n  async getAppInfo() {\n    this._lock();\n    try {\n      let result = await this.transport.send(\n        0xb0,\n        insAPDU.GET_APP_INFO_COMMAND,\n        0x00,\n        0x00,\n        Buffer(0),\n        this.allowedStatuses\n      );\n      if (!this.isSuccess(result)) this.mapProtocolError(result);\n\n      result = result.slice(0, result.length - 2);\n      let app_name, app_version;\n      try {\n        let offset = 1;\n        let app_name_length = result[offset++];\n        app_name = result.slice(offset, offset + app_name_length).toString();\n        offset += app_name_length;\n        let app_version_length = result[offset++];\n        app_version = result\n          .slice(offset, offset + app_version_length)\n          .toString();\n        return [app_name, app_version];\n      } catch (error) {\n        throw new Error(\n          `Unexpected result from device, parsing error: ${error}`\n        );\n      }\n    } finally {\n      this._unlock();\n    }\n  }\n\n  async getAppConfig() {\n    this._lock();\n    try {\n      let result = await this.transport.send(\n        0xe0,\n        insAPDU.GET_APP_CONFIG_COMMAND,\n        0x00,\n        0x00,\n        Buffer(0),\n        this.allowedStatuses\n      );\n      if (!this.isSuccess(result)) this.mapProtocolError(result);\n      result = result.slice(0, result.length - 2);\n      if (result.length !== 6)\n        throw new Error(`Can't parse app config of length ${result.length}`);\n\n      let storage_size = result.readUInt32BE(0, 4);\n      let keyboard_type = result[4];\n      let press_enter_after_typing = result[5];\n      return { storage_size, keyboard_type, press_enter_after_typing };\n    } finally {\n      this._unlock();\n    }\n  }\n\n  async dump_metadatas() {\n    this._lock();\n    try {\n      let metadatas = Buffer.alloc(0);\n      while (metadatas.length < this.storage_size) {\n        let result = await this.transport.send(\n          0xe0,\n          insAPDU.DUMP_METADATAS_COMMAND,\n          0x00,\n          0x00,\n          Buffer(0),\n          this.allowedStatuses\n        );\n        if (!this.isSuccess(result)) this.mapProtocolError(result);\n        metadatas = Buffer.concat([\n          metadatas,\n          Buffer.from(result.slice(1, -2)),\n        ]);\n        if (result[0] === 0xff && metadatas.length < this.storage_size) {\n          throw new Error(\n            `${this.storage_size} bytes requested but only ${metadatas.length} bytes available`\n          );\n        }\n      }\n      return this._toJSON(metadatas);\n    } finally {\n      this._unlock();\n    }\n  }\n\n  async load_metadatas(JSON_metadatas) {\n    this._lock();\n    try {\n      let metadatas = this._toBytes(JSON_metadatas);\n      if (metadatas.length === 0) {\n        throw new Error(\"No data to load\");\n      }\n      for (let i = 0; i < metadatas.length; i += 0xff) {\n        let chunk = metadatas.slice(i, i + 0xff);\n        await this._load_metadatas_chunk(\n          chunk,\n          i + chunk.length === metadatas.length ? true : false\n        );\n      }\n    } finally {\n      this._unlock();\n    }\n  }\n}\n\nexport default PasswordsManager;\n"],"sourceRoot":""}